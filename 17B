#include <bits/stdc++.h>

using namespace std;

int sign(long double a){
    if(a>0) return 1;
    if(a<0) return -1;
    if(a==0) return 0;
}
int per(vector<vector<long double>> t){
    long double k[2][3];
    k[0][0] = t[0][3]-t[0][1];
    k[0][1] = t[0][0] - t[0][2];
    k[0][2] = t[0][2]*t[0][1] - t[0][3]*t[0][0];
    k[1][0] = t[1][3]-t[1][1];
    k[1][1] = t[1][0] - t[1][2];
    k[1][2] = t[1][2]*t[1][1] - t[1][3]*t[1][0];
    if((k[0][0]*t[1][0] + k[0][1]*t[1][1] + k[0][2])*(k[0][0]*t[1][2] + k[0][1]*t[1][3] + k[0][2]) > 1e-10){
        return 0;
    }
    if((k[1][0]*t[0][0] + k[1][1]*t[0][1] + k[1][2])*(k[1][0]*t[0][2] + k[1][1]*t[0][3] + k[1][2]) > 1e-10){
        return 0;
    }
    return 1;
}
int main()
{
    srand(time(0));
    int n;
    cin >> n;
    vector<vector<long double>> t(n, vector<long double>(2));
    long double x,y;
    cin >> x >> y;
    for(int i = 0; i < n; ++i){
        cin >> t[i][0] >> t[i][1];
    }
    vector<long double> k(3);
    k[0] = 1+rand()%1000;
    k[1] = 1+rand()%1000;
    k[2] = -x*k[0] - y*k[1];
    int c = 0;
    for(int i = 0; i < n; ++i){
        vector<vector<long double>> tempt(2, vector<long double>(4));
        tempt[0][0] = t[i][0];
        tempt[0][1] = t[i][1];
        tempt[0][2] = t[(i+1)%n][0];
        tempt[0][3] = t[(i+1)%n][1];
        tempt[1][0] = x;
        tempt[1][1] = y;
        tempt[1][2] = x + 1000*k[1];
        tempt[1][3] = y - 1000*k[0];
        c+=per(tempt);

    }
    if(c%2==0){
        cout << "NO";
        return 0;
    }
    else cout << "YES";
}
/*#include <bits/stdc++.h>

using namespace std;

int main()
{
    long double t[2][4];
    for(int i = 0; i < 2; ++i){
        for(int j = 0; j < 4; ++j){
            cin >> t[i][j];
        }
    }
    long double tempk[2][3];
    tempk[0][0] = t[0][3]-t[0][1];
    tempk[0][1] = t[0][0] - t[0][2];
    tempk[0][2] = t[0][2]*t[0][1] - t[0][3]*t[0][0];
    tempk[1][0] = t[1][3]-t[1][1];
    tempk[1][1] = t[1][0] - t[1][2];
    tempk[1][2] = t[1][2]*t[1][1] - t[1][3]*t[1][0];
    if((tempk[0][0]*t[1][0] + tempk[0][1]*t[1][1] + tempk[0][2])*(tempk[0][0]*t[1][2] + tempk[0][1]*t[1][3] + tempk[0][2]) > 1e-10){
        cout << "NO";
        return 0;
    }
    if((tempk[1][0]*t[0][0] + tempk[1][1]*t[0][1] + tempk[1][2])*(tempk[1][0]*t[0][2] + tempk[1][1]*t[0][3] + tempk[1][2]) > 1e-10){
        cout << "NO";
        return 0;
    }
        if ((abs(tempk[1][0]*t[0][0] + tempk[1][1]*t[0][1] + tempk[1][2])<1e-10 ) && (abs(tempk[1][0]*t[0][2] + tempk[1][1]*t[0][3] + tempk[1][2])<1e-10)) {
            for(int s = 0; s <3; s+=2){
                if((t[0][s]-t[1][0])*(t[0][(s+2)%4]-t[1][2]) + (t[0][s+1]-t[1][1])*(t[0][(s+3)%4]-t[1][3]) <= 0){
                    cout << "YES";
                    return 0;
                }
            }
            cout <<"NO";
            return 0;
        }

    cout << "YES";
}*/
