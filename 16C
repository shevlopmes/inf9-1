#include <bits/stdc++.h>

using namespace std;
int sign(double a){
    if(a>0) return 1;
    if(a<0) return -1;
    return 0;
}
vector<vector<double>> C13 (vector<vector<double>> w, vector<double> r){
     bool e = false;
    double h = sqrt((w[0][0]-w[1][0])*(w[0][0]-w[1][0])+(w[0][1]-w[1][1])*(w[0][1]-w[1][1]));

    if (abs(h-(r[0]+r[1]))<1e-6 || abs(r[0]+h-r[1])<1e-6 || abs(r[1]+h-r[0]) < 1e-6) { e = true;}
    else if(h > r[0]+r[1] || h+r[0] < r[1] || h+r[1] < r[0]){}
    else {}
    vector<vector<double>> k(2, vector<double>(3));
    k[0][0] = w[1][1] - w[0][1];
    k[0][1] = w[0][0] - w[1][0];
    k[0][2] = w[1][0]*w[0][1] - w[0][0]*w[1][1];
    double x = w[0][0] + (w[1][0]-w[0][0])*(h*h+r[0]*r[0]-r[1]*r[1])*1./(2*h)*1./(h);
    double y = w[0][1] + (w[1][1]-w[0][1])*(h*h+r[0]*r[0]-r[1]*r[1])*1./(2*h)*1./h;
    k[1][0] = k[0][1];
    k[1][1] = -k[0][0];
    k[1][2] =  k[0][0]*y - k[0][1]*x;
    double q = (h*h+r[0]*r[0]-r[1]*r[1])*1./(2*h);
    double f = sqrt(k[1][0]*k[1][0]+k[1][1]*k[1][1]);
    k[1][0]/=f;
    k[1][1]/=f;
    k[1][2]/=f;
    vector<vector<double>> ans(2,vector<double>(2));
    ans[0][0] = x-k[1][1]*sqrt(r[0]*r[0]-q*q);
    ans[0][1] = y+k[1][0]*sqrt(r[0]*r[0]-q*q);
    ans[1][0] = x+k[1][1]*sqrt(r[0]*r[0]-q*q);
    ans[1][1] = y-k[1][0]*sqrt(r[0]*r[0]-q*q);
    return ans;
}
vector<vector<double>> commontouch (vector<vector<double>> w, vector<double> r){
    vector<vector<double>> ans;

}
vector<double> outcenter (vector<vector<double>>& t){
    double a = sqrt((t[0][0]-t[1][0])*(t[0][0]-t[1][0]) + (t[0][1]-t[1][1])*(t[0][1]-t[1][1]));
    double b = sqrt((t[2][0]-t[1][0])*(t[2][0]-t[1][0]) + (t[2][1]-t[1][1])*(t[2][1]-t[1][1]));
    double c = sqrt((t[0][0]-t[2][0])*(t[0][0]-t[2][0]) + (t[0][1]-t[2][1])*(t[0][1]-t[2][1]));
    double p = (a+b+c)*1./2;
    double s = sqrt(p*(p-a)*(p-b)*(p-c));
    double k[3][3];
    for(int i = 0; i <3; ++i){
        k[i][0] = t[(i+2)%3][1] - t[(i+1)%3][1];
        k[i][1] = t[(i+1)%3][0] - t[(i+2)%3][0];
        k[i][2] = t[(i+1)%3][0]*(t[(i+1)%3][1]-t[(i+2)%3][1]) - t[(i+1)%3][1] * (t[(i+1)%3][0] - t[(i+2)%3][0]);
    }
    double h[2][3];
    for(int i = 0; i < 2; ++i){
        h[i][0] = k[i][1];
        h[i][1] = -k[i][0];
        h[i][2] = t[i][1]*k[i][0] - t[i][0]*k[i][1];
    }
    double xh = (-h[0][2]*h[1][1] + h[1][2]*h[0][1])*1./(h[0][0]*h[1][1] - h[1][0]*h[0][1]);
    double yh = (-h[0][0]*h[1][2] + h[1][0]*h[0][2])*1./(h[0][0]*h[1][1] - h[1][0]*h[0][1]);
    double xm = (t[0][0]+t[1][0]+t[2][0])*1./3;
    double ym = (t[0][1]+t[1][1]+t[2][1])*1./3;
    double xo = xm+(xh-xm)*((-1.)/2);
    double yo = ym+(yh-ym)*((-1.)/2);
    vector<double> ans = {xo,yo,sqrt((xo-t[0][0])*(xo-t[0][0])+(yo-t[0][1])*(yo-t[0][1]))};
    return ans;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cout.precision(20);
    int n;
    cin >> n;
    vector<vector<double>> w(n,vector<double>(2));
    for(int i = 0; i < n; ++i){
        cin >> w[i][0] >> w[i][1];
    }
    vector<double> ans(3, 1000000);
    for(int i = 0; i < n; ++i){
        for(int j = i+1; j < n; ++j){
            double x = (w[i][0]+w[j][0])*1./2;
            double y = (w[i][1]+w[j][1])*1./2;
            double tmp = 0;
            for(int p = 0; p < n; ++p){
                if(sqrt((w[p][0]-x)*(w[p][0]-x)+(w[p][1] - y)*(w[p][1]-y)) > tmp){
                    tmp = sqrt((w[p][0]-x)*(w[p][0]-x)+(w[p][1] - y)*(w[p][1]-y));
                }
            }
            if(tmp < ans[2]){
                ans[2] = tmp;
                ans[0] = x;
                ans[1] = y;
            }
        }
    }
    for(int p = 0; p < n; ++p){
        for(int q = p+1; q < n; ++q){
            for(int r = q+1; r < n; ++r){
                vector<vector<double>> t = {w[p],w[q],w[r]};
                if((w[r][0]-w[p][0])*(w[q][1] - w[r][1]) == (w[r][1]-w[p][1])*(w[q][0] - w[r][0])) continue;
                vector<double> o = outcenter(t);
                double tmp = 0;
                for(int s = 0; s < n; ++s){
                    if(sqrt((w[s][0]-o[0])*(w[s][0]-o[0]) + (w[s][1] - o[1])*(w[s][1] - o[1])) > tmp){
                        tmp = sqrt((w[s][0]-o[0])*(w[s][0]-o[0]) + (w[s][1] - o[1])*(w[s][1] - o[1]));
                    }
                }
                if(tmp < ans[2]){
                    ans[2] = tmp;
                    ans[0] = o[0];
                    ans[1] = o[1];
                }
            }
        }
    }
    cout << ans[0] << " " << ans[1] << " " << ans[2];
}
