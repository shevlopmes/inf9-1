#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<vector<char>>b(100, vector<char>(100, '.'));
    string a;
    int j = 0;
    int c = 0;
    int n = 0;
    while(getline(cin,a)){
        for(int i = 0; i < a.size(); ++i){
            b[j][i] = a[i];
            if(a[i] == 'X') c++;
            if(a[i] == 'O') n++;
        }
        j++;
    }
    if(c-n < 0 || c - n > 1){
        cout << "INCORRECT";
        return 0;
    }
    int fc = 0;
    int fn = 0;
    vector<vector<int>> c5;
    vector<vector<int>> n5;
    vector<int> q;
    for(int i = 0; i < 100; i++){
        for(int j = 0; j < 96; j++){
            if(b[i][j] == 'O' && b[i][j+1] == 'O' && b[i][j+2] == 'O' && b[i][j+3] == 'O' && b[i][j+4] == 'O'){
                fn++;
                q.push_back(1000*i+j);
                q.push_back(1000*i+(j+1));
                q.push_back(1000*i+(j+2));
                q.push_back(1000*i+(j+3));
                q.push_back(1000*i+(j+4));
                n5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
            if(b[i][j] == 'X' && b[i][j+1] == 'X' && b[i][j+2] == 'X' && b[i][j+3] == 'X' && b[i][j+4] == 'X'){
                fc++;
                q.push_back(1000*i+j);
                q.push_back(1000*i+(j+1));
                q.push_back(1000*i+(j+2));
                q.push_back(1000*i+(j+3));
                q.push_back(1000*i+(j+4));
                c5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
        }
    }
    for(int i = 0; i < 96; ++i){
        for(int j = 0; j < 100; ++j){
            if(b[i][j] == 'O' && b[i+1][j] == 'O' && b[i+2][j] == 'O' && b[i+3][j] == 'O' && b[i+4][j] == 'O'){
                fn++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i+1)+j);
                q.push_back(1000*(i+2)+j);
                q.push_back(1000*(i+3)+j);
                q.push_back(1000*(i+4)+j);
                n5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
            if(b[i][j] == 'X' && b[i+1][j] == 'X' && b[i+2][j] == 'X' && b[i+3][j] == 'X' && b[i+4][j] == 'X'){
                fc++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i+1)+j);
                q.push_back(1000*(i+2)+j);
                q.push_back(1000*(i+3)+j);
                q.push_back(1000*(i+4)+j);
                c5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
        }
    }
    for(int i = 4; i < 100; i++){
        for(int j = 0; j < 96; j++){
            if(b[i][j] == 'O' && b[i-1][j+1] == 'O' && b[i-2][j+2] == 'O' && b[i-3][j+3] == 'O' && b[i-4][j+4] == 'O'){
                fn++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i-1)+(j+1));
                q.push_back(1000*(i-2)+(j+2));
                q.push_back(1000*(i-3)+(j+3));
                q.push_back(1000*(i-4)+(j+4));
                n5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
            if(b[i][j] == 'X' && b[i-1][j+1] == 'X' && b[i-2][j+2] == 'X' && b[i-3][j+3] == 'X' && b[i-4][j+4] == 'X'){
                fc++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i-1)+(j+1));
                q.push_back(1000*(i-2)+(j+2));
                q.push_back(1000*(i-3)+(j+3));
                q.push_back(1000*(i-4)+(j+4));
                c5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
        }
    }
    for(int i = 0; i < 96; i++){
        for(int j = 0; j < 96; j++){
            if(b[i][j] == 'O' && b[i+1][j+1] == 'O' && b[i+2][j+2] == 'O' && b[i+3][j+3] == 'O' && b[i+4][j+4] == 'O'){
                fn++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i+1)+(j+1));
                q.push_back(1000*(i+2)+(j+2));
                q.push_back(1000*(i+3)+(j+3));
                q.push_back(1000*(i+4)+(j+4));
                n5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
            if(b[i][j] == 'X' && b[i+1][j+1] == 'X' && b[i+2][j+2] == 'X' && b[i+3][j+3] == 'X' && b[i+4][j+4] == 'X'){
                fc++;
                q.push_back(1000*i+j);
                q.push_back(1000*(i+1)+(j+1));
                q.push_back(1000*(i+2)+(j+2));
                q.push_back(1000*(i+3)+(j+3));
                q.push_back(1000*(i+4)+(j+4));
                c5.push_back(q);
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
                q.pop_back();
            }
        }
    }
    if(fc*fn > 0){
        cout << "INCORRECT";
        return 0;
    }
    if(fc > 0){
        if(n != c-1){
            cout << "INCORRECT";
            return 0;
        }
        vector<int> per = c5[0];
        vector<bool> v(5, false);
        for(int i = 1; i < fc; ++i){
            for(int j = 0; j < 5; ++j){
                if(c5[i][0] != per[j] && c5[i][1] != per[j] && c5[i][2] != per[j] && c5[i][3] != per[j] && c5[i][4] != per[j]){
                    v[j] = true;
                }
            }
        }
        if(v[0] && v[1] && v[2] && v[3] && v[4]){
            cout << "INCORRECT";
                return 0;
        }
    }
    if(fn > 0){
        if(n != c){
            cout << "INCORRECT";
            return 0;
        }
        vector<int> per = n5[0];
        vector<bool> v(5, false);
        for(int i = 1; i < fn; ++i){
            for(int j = 0; j < 5; ++j){
                if(n5[i][0] != per[j] && n5[i][1] != per[j] && n5[i][2] != per[j] && n5[i][3] != per[j] && n5[i][4] != per[j]){
                    v[j] = true;
                }
            }
        }
        if(v[0] && v[1] && v[2] && v[3] && v[4]){
            cout << "INCORRECT";
                return 0;
        }
    }
    cout << "CORRECT";
}
